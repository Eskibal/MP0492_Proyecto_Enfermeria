package com.example.enfermeria.controller;

import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.example.enfermeria.EnfermeriaApplication;
import com.example.enfermeria.dao.NurseRepository;
import com.example.enfermeria.entity.Nurse;

@RestController
@RequestMapping("/nurse")
public class NurseController {
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private NurseRepository nurseRepository;
	
	/*
	 * TODO ESTE METODO NO ES MI PARTE, ESTÁ DESACTUALIZADO
	@PostMapping("/login")
    public ResponseEntity<Boolean> login(@RequestBody Nurse loginRequest) {
    	String usr = loginRequest.getUser();
    	String pw = loginRequest.getPassword();
    	
    	for (Nurse nurses : nurseList) {
    		if (nurses.getUser().equals(usr) && nurses.getPassword().equals(pw)) {
    			return ResponseEntity.ok(true);
    		}
    	}
    	return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(false);
    }
	*/
	
	@GetMapping("/index")
	public @ResponseBody Iterable<Nurse> getAll()
	{
		// This returns a JSON or XML with the users
		return nurseRepository.findAll();
	}
	
	
	/*
	 * TODO ESTE METODO NO ES MI PARTE, ESTÁ DESACTUALIZADO
		@GetMapping("/name")
		public ResponseEntity<Nurse> findByName(@RequestParam(value = "name") String name) {
	
			for (int i = 0; i < nurseList.size(); i++) {
				if (name.equalsIgnoreCase(nurseList.get(i).getName())) {
					return ResponseEntity.ok(nurseList.get(i));
				}
			}
			return ResponseEntity.notFound().build();
		}
	*/
}